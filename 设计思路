项目详情页设计
    本节我们要设计项目详情页。按照我们之前的设计，项目详情页至少要包括3个部分：

        接口库 ：难度 ***  （接口导入/调试）

        用例设置 ：难度 ***** （用接口库的接口组成各种用例/执行/报告/监控）

        项目设置 ：难度 * （项目名称/备注/其他管理者 等后续新增的属性修改）
    我们目前的细节设计是，我们点击项目后，默认进入 接口库。然后无论在哪个子页面，都要有一个微型的导航/菜单，来让我们快速切换到不同的自模块

    所以本节我们就要做出三个空壳子模块，并架构好链接，还有学习首次使用oid来区分不同的数据返回给前端。

    首先我们新建三个html，分别取名：

    P_apis.html

    P_cases.html

    P_project_set.html

    这三个页面 对应 接口库/用例库/项目设置

bug-1:

描述：删除项目后，这个项目内的接口并没有被删除，依然停留在数据库，并且通过后台删除会报错，变成了实打实的脏数据。



解决：这就是所谓的联级删除了。

首先找到我们的删除项目的函数：delete_project
发现我们之前写这个函数的时候，还没有去开发接口概念，所以没有写接口删除的代码，那么现在就该加上了。（之后项目内的用例模块也需要到时候进行删除）

 bug-2:

描述：接口保存后，再打开发现数据没有显示成功。



解决：这个问题是最近的一个bug，我去后台看了一下，其实数据都保存成功了，那么问题就出在显示上了。

这里要给大家解释一下，在我们前端的ts_show函数中，目前只有 清空初始化调试弹层+显示弹层和接口id/接口name。
还并没有开始写显示接口真实内容的代码，所以下一节才是要做这个显示，因为当中涉及到编码格式的显示/子页面的切换/下拉框的选择等等，
所以还是比较复杂的。

bug-3:

描述：好几个页面的console中都出现了这个404报错，也不知道什么意思也不知道怎么修复
解决： 大家可以看到这个红色报错，404代表这个资源没有找到，这个资源的后缀是.ico，也就是一个图标，之所以一直懒得管这个bug，就是因为仅仅是个小图标而已，但是天天这么红实在碍眼，所以就修复一下吧：

首先要明白这个.ico到底是什么，为什么我明明没引用，但是每个页面都会报错找不到。其实他就是我们的icon图标，也就是这个网页的小图标：
而html默认都会去寻找这个小标志，我们没有设置过，自然会报错了，这里我们可以用俩种方式解决，一是不让它找了，二是给它弄个漂亮的小icon。无论哪种，我们都只需要在welcome.html中改动即可在所有页面模块内生效。

打开welcome.html：

在head中加入这样一句代码：<link rel="shortcut icon" href="#">
可以制作一个.ico的图片放在/static目录下，然后这句代码的href属性就要为这个图片的相对路径了：
在线制作的网站做一个：http://www.bitbug.net/


bug-4:

描述：在接口库中，左侧菜单展开后，隐藏按钮不见了？
解决：其实并不是不见了，只是因为隐藏按钮被这个接口库顶部菜单给遮挡了。虽然我们可以通过调整层级来让这个按钮显示出来，
但是我总觉得这个按钮设计的并不好，所以我们这次干脆给这个显示隐藏按钮 给重新设计，当然逻辑不变，只是位置和文案都变了

bug-5:

描述：接口名称目前貌似没法修改，用户不能登陆后台去修改接口名称吧？
解决：这个是我们疏忽的一点，之前的确忘记了接口名称了。所以用户新增的接口名称都是None，而且没法改。这属于设计缺失，


jquery触发a标签点击事件
bug-6

描述：接口，点击调试，没有自动打开请求体的格式
    function ts_show(id, name) {
        clear_ts_api();
        document.getElementById('ts').style.display='block';
        $.get('/get_api_data/',{
            'api_id':id,
        },function (ret) {
            document.getElementById('ts_header').value = ret.api_header;
            // 请求体编码格式
            var body_method = '#'+ret.body_method;
            $("li a[href="+body_method+"]")[0].click();

解决方案，("li a[href="+body_method+"]")[0].click();  加上[0]

<a id="logoutClick" href="${contextPath}/logout" ><i class="fa fa fa-sign-out"></i>退出</a>
$("#logoutClick")[0].click();
完美解决

$("#logoutClick")[0].click();

参考
今天想向自动触发a标签的click事件，但是把事件绑定到a 标签上，即$("#id").click(),但是没有任何反应，然后查了下，原来不能把click事件直接绑定到a标签上，必须绑定到 标签之内的元素上。
例如：

<a href="xxxxxxxxx" class="curr_li"><li id="bbbb">公式管理</li></a>
1
要自动触发的话，$("#bbbb").trigger(“click”)




run_case  的说明
在主要的run函数中 一开始就调用这个make_def函数来创造很多小用例函数。然后这个函数内是个for循环，
利用python的setattr函数来给Test类创造子函数，setattr应该要传递三个值，第一个是类名，
第二个是小函数的名字(小函数名我们为了避免重名，所以test开头的基础上加上了步骤的执行顺序-index来命名，
而且unittest就是按照这个小用例函数名的字符串判断来确定执行顺序，所以我们为了避免 出现“12” 小于“5” 这个情况，
就强行变成了"012">“005” ,这样才能保持执行顺序正确,而用法就是字符串.zfill(固定长度)。)，
第三个参数就是我们要创造的函数本体，这个我们必须要再新建一个函数，这个第三个参数就是调用这个新函数，
而这个新函数 会返回一个 demo函数来作为本体。
所以我们在上面再创建一个新的 创造这个函数 的函数：

而这个函数需要什么作为参数呢？需要的就是我们的多个step中的正在要创造的这个单个step本体，因为它要去实际请求这个step了。
那个tool就是我们真正创造的小用例函数本身，它调用或者说复制的就是我们Test里的那个demo函数，然后返回这个tool就对了。
这里我们也可以再用setattr函数来给这个小tool函数，加上__doc__属性，这个属性就是每个def函数都可以拥有的函数描述。
在unittest里就会变成这个用例函数的用例名字。
所以我们创造这个tool的时候，可以指定它的名字，名字当然是从step中拿啊
最后还有一步，就是我们要给这个demo函数 增加这个step的接收用的型参：

接收到了这个step数据后，我们随便打印一下step的url，看看整个数据链条是否成功